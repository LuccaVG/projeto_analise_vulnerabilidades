#!/bin/bash
# Simple installation script for Linux Vulnerability Analysis Toolkit
# This script detects the Linux distribution and installs the necessary dependencies

set -e  # Exit on any error

# Display banner
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                                            ‚ïë"
echo "‚ïë               üî• LINUX VULNERABILITY ANALYSIS TOOLKIT üî•                   ‚ïë"
echo "‚ïë                         INSTALLATION SCRIPT                               ‚ïë"
echo "‚ïë                                                                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "‚ùå This script must be run as root (with sudo)"
    echo "Please run: sudo bash install.sh"
    exit 1
fi

# Check if we're on Linux
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                          ‚ùå ERROR ‚ùå                           ‚ïë"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïë     This toolkit is designed EXCLUSIVELY for Linux systems   ‚ïë"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïë     ‚úÖ Supported: Debian, Kali, Ubuntu, Arch Linux          ‚ïë"
    echo "‚ïë     ‚ùå NOT Supported: Windows, macOS, WSL                    ‚ïë"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïë     Please run this on a Linux system for optimal security   ‚ïë"
    echo "‚ïë     tool performance and compatibility.                      ‚ïë"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïë     REASON: The toolkit installs and configures Linux-native ‚ïë"
    echo "‚ïë     security tools with system-level dependencies that       ‚ïë"
    echo "‚ïë     cannot function correctly on other operating systems.    ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    exit 1
fi

# Detect Linux distribution
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$ID
else
    echo "‚ùå Cannot detect Linux distribution"
    exit 1
fi

echo "‚úÖ Detected Linux distribution: $DISTRO"

# Install system dependencies based on distribution
case $DISTRO in
    debian|ubuntu|kali)
        echo "üîÑ Updating package lists..."
        apt-get update
        
        echo "üì¶ Installing dependencies for $DISTRO..."
        apt-get install -y python3 python3-pip git wget curl build-essential golang-go
        ;;
    arch)
        echo "üîÑ Updating package lists..."
        pacman -Sy
        
        echo "üì¶ Installing dependencies for Arch Linux..."
        pacman -S --noconfirm python python-pip git wget curl base-devel go
        ;;
    fedora|centos|rhel)
        echo "üîÑ Updating package lists..."
        dnf check-update || true
        
        echo "üì¶ Installing dependencies for $DISTRO..."
        dnf install -y python3 python3-pip git wget curl gcc gcc-c++ golang
        ;;
    *)
        echo "‚ö†Ô∏è Unsupported Linux distribution: $DISTRO"
        echo "Attempting to install required packages anyway..."
        # Try common package managers
        if command -v apt-get &> /dev/null; then
            apt-get update
            apt-get install -y python3 python3-pip git wget curl build-essential golang-go
        elif command -v dnf &> /dev/null; then
            dnf check-update || true
            dnf install -y python3 python3-pip git wget curl gcc gcc-c++ golang
        elif command -v pacman &> /dev/null; then
            pacman -Sy
            pacman -S --noconfirm python python-pip git wget curl base-devel go
        else
            echo "‚ùå Could not determine package manager. Please install manually:"
            echo "  - Python 3.6+"
            echo "  - Python pip"
            echo "  - Git"
            echo "  - Wget"
            echo "  - Curl"
            echo "  - Build tools (gcc, make, etc.)"
            echo "  - Go (golang)"
            exit 1
        fi
        ;;
esac

# Install Python dependencies
echo "üì¶ Installing Python dependencies..."
python3 -m pip install -r config/requirements.txt

# Set up Go environment
echo "üîß Setting up Go environment..."
# Ensure go/bin is in PATH
if ! grep -q "GOPATH" ~/.bashrc; then
    echo 'export GOPATH=$HOME/go' >> ~/.bashrc
    echo 'export PATH=$PATH:$GOPATH/bin' >> ~/.bashrc
    
    # Also set for current session
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOPATH/bin
fi

# Create directories if they don't exist
mkdir -p reports
mkdir -p scripts

# Make script files executable
chmod +x scripts/*.sh

# Run the comprehensive auto-installer
echo "üöÄ Running comprehensive auto-installation..."
python3 scripts/autoinstall.py

# Verify installation
echo "üîç Verifying installation..."
python3 verify_installation.py

echo ""
echo "üéâ Installation completed!"
echo ""
echo "To run the toolkit:"
echo "  python3 run.py --help"
echo "  python3 run.py --target example.com"
echo ""
echo "Or use the shell script:"
echo "  bash scripts/run_toolkit.sh --help"
